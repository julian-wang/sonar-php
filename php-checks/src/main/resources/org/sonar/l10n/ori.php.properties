rule.php.S107.param.max=最大允许的参数个数
rule.php.S1479.param.max=最大的case语句数目
rule.php.S1151.param.max=最大允许的代码行数
rule.php.S1142.param.max=每个函数最大允许的返回语句
rule.php.S100.param.format=正则表达式用来检测函数名
rule.php.S139.param.legalTrailingCommentPattern=尾随文本注释的模式是允许的。 默认的, 注释只能包含一个单词。
rule.php.S104.param.max=一个文件中最大允许的行数
rule.php.S103.param.maximumLineLength=最大允许的代码行长度
rule.php.S134.param.max=控制流语句最大允许的嵌套深度
rule.php.S1192.param.threshold=触发一个问题时，必须的字面值重复次数
rule.php.S1541.param.threshold=最大允许的复杂度
rule.php.S1451.param.headerFormat=预期的版权和许可证头（纯文本）
rule.php.S101.param.format=正则表达式用来检测类名
rule.php.S116.param.format=正则表达式用来检测字段名
rule.php.S1067.param.max=表达式中最大允许的条件运算符数
rule.php.S115.param.format=正则表达式用来检测常量名
rule.php.S138.param.max=一个函数中最大允许的代码行数
rule.php.S1448.param.maximumMethodThreshold=最大的函数个数
rule.php.S1448.param.countNonpublicMethods=是否把非公开方法计算在内
rule.php.S1311.param.max=允许的最大复杂度
rule.php.S1200.param.max=一个类允许依赖的类的最大数目
rule.php.S117.param.format=正则表达式用来检测名字
rule.php.S1488.name=不能声明本地变量后立即返回
rule.php.S125.name=不应该注释掉代码块
rule.php.S1793.name="elseif" 关键字应当用 "else if" 关键字替换
rule.php.S1799.name="exit(...)" and "die(...)"语句不应该使用
rule.php.S1765.name=不应该使用"var"关键字
rule.php.S1784.name=应该显式的声明方法的可见性
rule.php.S1781.name=PHP关键字和常量"true", "false", "null" 都应该使用小写
rule.php.S1766.name=不应该在一个语句中声明不止一个属性
rule.php.S1124.name=修饰符应以正确的顺序声明
rule.php.S1780.name=只包含PHP的文件应该省略闭合标签"?>"
rule.php.S1779.name=只应使用lf字符（Unix格式）来结束一行
rule.php.S1788.name=函数的默认参数应该放到最后
rule.php.S1808.name=源代码应符合格式标准
rule.php.S1808.param.namespace_blank_line== "namespace" declarations should be followed by a blank line\n\
== Noncompliant Code Example\n\
``php\n\
namespace Vendor\\Package;\n\
use FooClass;\n\
``\n\
== Compliant Solution\n\
``\n\
namespace Vendor\\Package;\n\
\n\
use FooClass;\n\
``
rule.php.S1808.param.use_after_namespace== "use" declarations should be placed after "namespace" declarations\n\
== Noncompliant Code Example\n\
``php\n\
use FooClass;\n\
\n\
namespace Vendor\\Package;\n\
``\n\
== Compliant Solution\n\
``php\n\
namespace Vendor\\Package;\n\
\n\
use FooClass;\n\
``
rule.php.S1808.param.use_blank_line== "use" declarations should be follow by a blank line\n\
== Noncompliant Code Example\n\
``php\n\
use FooClass;\n\
$foo = 1;\n\
``\n\
== Compliant Solution\n\
``php\n\
use FooClass;\n\
\n\
$foo = 1;\n\
``
rule.php.S1808.param.open_curly_brace_classes_functions== Open curly braces should be at the beginning of a new line for classes and functions\n\
== Noncompliant Code Example\n\
``php\n\
class MyClass {\n\
    \tfunction my_function(){\n\
    \t\t...\n\
    \t}\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
class MyClass\n\
{\n\
    \tfunction my_function()\n\
    \t{\n\
        \t\t...\n\
    \t}\n\
}\n\
``
rule.php.S1808.param.open_curly_brace_control_structures== Open curly braces should be at the end of line for control structures\n\
== Noncompliant Code Example\n\
``php\n\
if ($something)\n\
{\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.one_space_after== There should be exactly one space between closing parenthesis and opening curly braces\n\
== Noncompliant Code Example\n\
``php\n\
if ($something)      {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.one_space_before== There should be exactly one space between control structure keyword and opening parenthesis or curly brace\n\
== Noncompliant Code Example\n\
``php\n\
if($something) {\n\
    \t...\n\
}\n\
\n\
try{\n\
    \t...\n\
} catch (Exception $e) {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
\n\
try {\n\
    \t...\n\
} catch (Exception $e) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.closing_curly_brace== Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line\n\
== Noncompliant Code Example\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
else {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
} else {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.one_space_for== There should be one space after each ";" in "for" statement\n\
== Noncompliant Code Example\n\
``php\n\
for ($i = 0;$i < 10;   $i)\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
for ($i = 0; $i < 10; $i) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.space_comma== Commas should be followed by one space and not preceded by any\n\
== Noncompliant Code Example\n\
``php\n\
pressJuce($apply ,$orange);\n\
``\n\
== Compliant Solution\n\
``php\n\
pressJuce($apply, $orange);\n\
``
rule.php.S1808.param.no_space_method_name== There should not be any space after a method name\n\
== Noncompliant Code Example\n\
``php\n\
do_something ();\n\
``\n\
== Compliant Solution\n\
``php\n\
do_something();\n\
``
rule.php.S1808.param.foreach_space== In foreach statement there should be one space before and after "as" keyword and "=>" operator.\n\
== Noncompliant Code Example\n\
``php\n\
foreach ($fruits    as $fruit_key =>     $fruit) {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
foreach ($fruits as $fruit_key => $fruit) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.no_space== There should not be any space after the opening parenthesis and before the closing parenthesis\n\
== Noncompliant Code Example\n\
``php\n\
analyse( $fruit );\n\
``\n\
== Compliant Solution\n\
``php\n\
analyse($fruit);\n\
``
rule.php.S1808.param.closure_format== Closures declaration should be correctly spaced\n\
> Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword.\n\
== Noncompliant Code Example\n\
``php\n\
$closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {\n\
    \t// body\n\
};\n\
``\n\
== Compliant Solution\n\
``php\n\
$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\n\
    \t// body\n\
};\n\
``
rule.php.S1808.param.function_declaration_arguments_indentation== Arguments in method/function declarations should be correctly indented\n\
> Argument lists may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list should be on the next line, and there should be only one argument per line.\n\
> When the argument list is split across multiple lines, the closing parenthesis and opening brace should be placed together on their own line with one space between them.\n\
==  Noncompliant Code Example\n\
``php\n\
namespace Vendor\\Package;\n\
\n\
class ClassName\n\
{\n\
    \tpublic function aVeryLongMethodName(ClassTypeHint $arg1,   // Noncompliant\n\
        \t\t&$arg2, array $arg3 = []) {\n\
\n\
        \t\t$noArgs_longVars = function () use ($longVar1,         // Noncompliant\n\
            \t\t\t$longerVar2,\n\
            \t\t\t$muchLongerVar3\n\
            \t\t\t) {\n\
                \t\t\t\t// body\n\
            \t\t\t};\n\
    \t}\n\
\t}\n\
``\n\
==  Compliant Solution\n\
``php\n\
namespace Vendor\\Package;\n\
\n\
class ClassName\n\
{\n\
    \tpublic function aVeryLongMethodName(\n\
        \t\tClassTypeHint $arg1,\n\
        \t\t&$arg2,\n\
        \t\tarray $arg3 = []\n\
    \t) {\n\
        \t\t$noArgs_longVars = function () use (\n\
            \t\t\t$longVar1,\n\
            \t\t\t$longerVar2,\n\
            \t\t\t$muchLongerVar3\n\
          \t\t) {\n\
                \t\t\t\t// body\n\
          \t\t};\n\
    \t}\n\
}\n\
``
rule.php.S1808.param.function_calls_arguments_indentation== Arguments in method/function calls should be correctly indented\n\
> Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.\n\
== Noncompliant Code Example\n\
``php\n\
<?php\n\
$foo->bar($longArgument,    // Noncompliant\n\
    \t$longerArgument,\n\
    \t$muchLongerArgument);   // Noncompliant - closing parenthesis should be place on the next line\n\
``\n\
== Compliant Solution\n\
``php\n\
<?php\n\
$foo->bar(\n\
    \t$longArgument,\n\
    \t$longerArgument,\n\
    \t$muchLongerArgument\n\
);\n\
``
rule.php.S1808.param.interfaces_indentation== List of implemented interfaces should be correctly indented\n\
> Lists of implements may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there should be only one interface per line.\n\
==  Noncompliant Code Example\n\
``php\n\
class ClassName extends ParentClass implements \\ArrayAccess, \\Countable,\n\
    \t\\Serializable\n\
{\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
class ClassName extends ParentClass implements\n\
    \t\\ArrayAccess,\n\
    \t\\Countable,\n\
    \t\\Serializable\n\
{\n\
}\n\
``
rule.php.S1808.param.extends_implements_line== Class names, "extends" and "implements" keywords should be located on the same line\n\
The goal of this coding rule is to make it obvious at first look that a class extends some other classes and/or implements some interfaces. The names of extended classes or implemented interfaces can be located on next lines.\n\n\
== Noncompliant Code Example\n\
``php\n\
<?php\n\
class ClassName\n\
extends ParentClass {...}\n\
``\n\
== Compliant Solution\n\
``php\n\
<?php\n\
class ClassName extends ParentClass {...}\n\
``\n\
or\n\
``php\n\
<?php\n\
class ClassName extends\n\
ParentClass {...}\n\
``
rule.php.S1757.name=应该使用"<?php"和"<?="标签

# Common rules
rule.common-php.InsufficientBranchCoverage.name=单元测试要覆盖功能不全的分支
rule.common-php.InsufficientBranchCoverage.param.minimumBranchCoverageRatio=必需的最小分支覆盖率
rule.common-php.InsufficientCommentDensity.name=源文件应该有足够的注释行密度
rule.common-php.InsufficientCommentDensity.param.minimumCommentDensity=必需的最小注释密度
rule.common-php.DuplicatedBlocks.name=源文件不应有任何重复的块
rule.common-php.InsufficientLineCoverage.name=单元测试要覆盖功能不全的代码行
rule.common-php.InsufficientLineCoverage.param.minimumLineCoverageRatio=必需的最小代码行覆盖率
rule.common-php.FailedUnitTests.name=应该修复失败的单元测试
rule.common-php.SkippedUnitTests.name=跳过的单元测试应该被移除或修复
